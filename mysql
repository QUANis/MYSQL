mysql
服务的基本使用把数据存储到服务器上过程我们负责维护数据库的数据
库的管理命令  表的管理命令  记录管理命令
insert  update  delete  select
数据类型 字符类型  数值类型   日期时间类型  枚举类型 

使用mysql> 管理环境
操作指令型
MYSQL指令：环境切换，看状态，退出等控制
SQL指令  ：数据库定义/查询/操作/授权语句
基本注意事项
操作指定不区分大小写（密码，变量值除外）
每条SQL指令以；结束或分隔
不支持Tab健自动补齐
\c可废弃当前编写的操作指
常用的SQL指令
DDL数据定义语言（create  alte  drop)
DML数据操作语言（insert   update  delete)
DCL数据控制语言（grant  revoke)
DTL数据事物语言（commit rollback savepoint)
数据库管理命
show databases;             //显示已有的库
user 库名；                 //切换库
select database();        //显示当前所在的库
create database 库名；    //创建新库
show tables;            //显示已有的表 
drop databases 库名;     //删除库
支持多种操作系统Windowa Unix Linux
支持多种开发语言 php perl python
系统自带的软件包要卸载 查询 rpm -q mariadb-server
提供服务的软件包 rpm -e --nodeps mariadb-server
提供管理工具的命令rpm -e --nodeps mariadb
删除前一定要服务停掉 systemctl stop mariadb
卸载一定要对应的配置主文件要删除 rm -rf /etc/my.cnf
对应的mysql配置文件也要删除 rm -rf /var/lib/mysql/*
软件 tar -xvf mysql
查看 ls *.rpm
提供数据库的主包mysql-community-server 
提供数据库的命令包mysql-community-client
全新安装rpm -ivh
升级安装rpm -Uvh mysql-community-*.rpm
安装软件包有依赖 
查看 rpm -qa | grep -i mysql
启动服务初始化systemctl start mysql
开机自起systemctl enable mysql 
启动服务后看以下的服务 
查看端口是否启动 netstat -atlunp | grep 3306
启动进程服务 ps -C mysql
数据库目录 ls/var/lib/mysql
主配置文件 ls /etc/my.cnf
用户连接数据库的有3种常用的是（命令行）（脚本php python)(图形工具）
mysql -h数据库服务器IP地址 -u连接数据库的用户 -p密码
数据库初始密码 ls/var/log/mysqld.log
过滤密码grep password /var/log/mysqld.log
登陆数据库的密码不可以用的要修改密码
数据库密码复杂度策论
alter user root@"localhost" identified by "123qqq...A“；
退出数据库exit quit
登陆数据库
mysql -uroot -p123qqq...A
查看数据库机构
show databases;
查看数据库所有的变量like=过滤
show variables like "%password%";
密码策略
validate_password_policy   策略值MEDIUM
修改密码策略值为
0 or LOW          
1 or MEDIUM(默认)  长度：数字，小写/大写 ，和特殊字符
2 or STRONG        长度：数字，小写/大写和特殊字符；字典文件
修改密码全局变量
set  global validate_password_policy=0;
修改密码的长度
set global validate_password_length=6
修改密码为
alter user root@"localhost" identified by "123456“；
退出
quit
systectl stop mysql
修改配置文件保持密码永久有效vim /etc/my.cnf
[mysqld]
validate_password_policy=0
alidate_password_length=6
重起服务
systecctl restal mysql
数据库管理命令 查看服务器上已有的库 切换库 删除库 查看库里已有的表
查看已有的库
show databases;
创建库
create database gamedb;   gamedb=表名
显示当前所在的库 函数database()
select database();
表管理命令
表就要在库里创建表就算文件
create table tom.a(姓名 char(3),年龄 int);     tom=库名   a=表明
use to
show tables;
查看表结构
desc tom.a;
删除表 drop table tom.a;
记录管理命令 
记录类似于文件里行
select *from 表名；                  //查看表记录
insert into 表名  values（值列表）;   //插入表记录 字符要用双引起来"tom"
update 表明 set 字段=值;             //修改表记录
delete from 表名;                   //删除表记录 
插入表记录 insert into 库名.库 values("tom",21),("lisi",22);
修改表记录 update tom.a set 年龄=21 where 姓名="tom";
删除表记录 delete from tom.a where 姓名="tom"
数据库服务器<---库<---表<---记录<---列
设置表使用字符集 gb2312 utf8
查看表的创建表的命令
show creat table t1;查看字符集
创建表字符
->create table 学生表（姓名 char(3), 年龄 int )
->DEFAULT CHARSET=utf8;
insert into 学生表 values("张三",19);
select *from 学生表;
mysql数据类型
常见的信息种类
数值型：体重，身高，成绩，工资
字符型：姓名，工作单位，通信地址
枚举型：兴趣爱好，性别
日期时间型：出生时间，注册时间。你的结婚纪念日
数值类型   
  类型     大小     范围（有符号）    范围（无符号）      用途
TINYINT   1字节    -128～127        0～255           微小整数
SMALLINT  2字节    -32768～32767    0～65535         小整数
MEDIUMINT 3字节    -22/23～2/23-1   0～2/24-1        中整数
INT       4字节    -2/31～2/31-1    0～2/32-1        大整数
BIGINT    8字节    -2/63～2/63-1    0～2/64-1        极大整数
FLOAT     4字节                                      单精度浮点数
DOUBLE    8字节                                      双精度浮点数
DECIMAL   对DEIMAL（M，D）， 其中M为有效位数，D为小数位数，M应大于D，占用M+2字节
-> create table t1(
-> age tinyint unsigned,                   unsigned=无符号存储范围
->gozh float(7,2)                          工资=万数
）；                                       如果有小数点会4舍5入
insert into t1 values(19,20000）；         写表记录 可以写负数

字符类型
   定长：char(存字符数）
   最大长度255字符
   不够指定字符数时在左右用空格补齐
   字读数断超出时，无法写入数据l
变长：varchar（存字符数）
    可以存65320个
   按数据实际大小分配存储空间
   字符数断超出时，无法写入数据
 大文本类型：text/blob       可以存视频音频
   字符数大于65535存储时使用
从速度上用cahr快不用读取 节省系统资源
create database  t5
use t5;
create table t5(          char必须要设默认值如果不设默认值是1
姓名 chae(3),
邮箱 varchar(15),
通信地址 varchar(30)
)
DEFAULT CHARSET=utf8;
drsc t;
+--------------+-------------+------+-----+---------+-------+
| Field        | Type        | Null | Key | Default | Extra |
+--------------+-------------+------+-----+---------+-------+
| 姓名         | char(3)     | YES  |     | NULL    |       |
| 邮箱         | varchar(15) | YES  |     | NULL    |       |
| 通信地址     | varchar(30) | YES  |     | NULL    |       |
+--------------+-------------+------+-----+---------+-------+
insert into t5 values("李四","123@163.com","北京南");
select *from t5
+--------+-------------+--------------+
| 姓名   | 邮箱        | 通信地址     |
+--------+-------------+--------------+
| 李四   | 123@163.com | 北京南       |
+--------+-------------+--------------+
日期时间类型
  日期：DATE
  占用4个字节
   范围：0001-01-01 ～9999-12-31
年份：YEAR
   占用1个字节
   范围：1901～2155
时间：TIME
   占用3个字节
   格式：HH：MM：SS
 年份 year yyyy 2018
 时间 time hhmmss 164258
 日期 yyyymmdd  20180229
 关于日期时间字段
 当未给TIMESTAMP字段赋值时,自动以前系统时间赋值而DATETIME 字段默认赋值为NULL
 YEAR年份的处理
 默认用4位数字表示当只用2位数字赋值时01~69视为2001~2069,而70~99视为1970~1999
 > create table 时间(
    -> 姓名 char(3), 
    -> 生日 date,
    -> 出生 year,
    -> 上课 time,
    -> 纪念日 datetime)
    -> DEFAULT CHARSET=utf8;
 查看表结构 desc 时间；
 +-----------+----------+------+-----+---------+-------+
| Field     | Type     | Null | Key | Default | Extra |
+-----------+----------+------+-----+---------+-------+
| 姓名      | char(3)  | YES  |     | NULL    |       |
| 生日      | date     | YES  |     | NULL    |       |
| 出生      | year(4)  | YES  |     | NULL    |       |
| 上课      | time     | YES  |     | NULL    |       |
| 纪念日    | datetime | YES  |     | NULL    |       |
+-----------+----------+------+-----+---------+-------+
 写表
 insert into 日期 values("李四",20181120,1990,083000,20181224203018);
 查看表内容：select *from 时间; 
 +--------+------------+--------+----------+---------------------+
| 姓名   | 生日       | 出生   | 上课     | 纪念日              |
+--------+------------+--------+----------+---------------------+
| 李四    | 2018-11-20 |   1990 | 08:30:00 | 2018-12-24 20:32:18 |
+--------+------------+--------+----------+---------------------+

 枚举类型
 什么时枚举就如工作中填写选择题如性别
 从给定值集合中选择单个值，ENUM定义格式enum(值1，值2，值3）
 从给定值集合中选择一个或多个值，SET 定义格式：set（值1，值2，值N)
 create database 枚举;
 use  枚举;
  create table 选择(
  create table 爱好(
-> 姓名 char(3),
-> 兴趣 set("骑行","爬山","跑步","搏击"),
-> 性别 enum("男","女","NO"))
-> DEFAULT CHARSET = utf8;
 desc 爱好
 | Field  | Type                                     | Null | Key | Default | Extra |
+--------+------------------------------------------+------+-----+---------+-------+
| 姓名   | char(3)                                  | YES  |     | NULL    |       |
| 兴趣   | set('骑行','爬山','跑步','搏击')         | YES  |     | NULL    |       |
| 性别   | enum('男','女','NO')                     | YES  |     | NULL    |       |
+--------+------------------------------------------+------+-----+---------+-------+
insert into 爱好 values ("李四","骑行,跑步,爬山","男");
select *from  爱好;
+--------+----------------------+--------+
| 姓名   | 兴趣                 | 性别   |
+--------+----------------------+--------+
| 李四   | 骑行,爬山,跑步       | 男     |
+--------+----------------------+--------+

  
